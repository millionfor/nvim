
snippet usa "Usage Template"
  /**
   * 使用说明
   * 
   * Usage:
   *   v-io-permission:[menueId] 入口页面获取权限数据
   *   v-permission:[menueId].[subMenuId] 按钮权限
   *   
   * Authors:
   *   QuanQuan <millionfor@apache.org>
   */

snippet pror "Promise.withResolvers()"
	const { promise, resolve, reject } = Promise.withResolvers()

	setTimeout(() => {
		resolve('Success!');
	}, 1000);

	promise.then(value => {
		console.log(value); // "Success!"
	});

snippet oent "Object.entries"
	Object.entries(${0}).map(([key, value]) => ({ key, value }));

snippet zs "/** quanquan **/"
	/**
	 * @FileName        ${0:`substitute(expand("%:t"), "." . expand("%:e"), "", "")`}
	 * @CreatedTime     `strftime("%a, %b %d, %Y %H:%M")`
   * @LastModified    三, 05 14, 2025 17:53:47 CST
	 * @Author          QuanQuan <millionfor@apache.org>
	 * @Description     ${0}
	 */

snippet node "#!/usr/bin/env"
${0:#}!/usr/bin/env node

/**
 * ${1: test}
 *
 * Created Time    `strftime("%a, %b %d, %Y %H:%M")`
 * Last Modified   `strftime("%a, %b %d, %Y %H:%M")`
 *
 * Authors:
 *   QuanQuan <millionfor@apache.org>
 */

snippet err "throw new Error"
	throw new Error('Error => ${0}');

snippet mtodojs "// TODO (2020/04/05): test"
	// TODO (`strftime("%a, %b %d, %Y %H:%M")`): ${0}

snippet mjs "/* Modified by QuanQuan<millionfor@apache.org> 2021-10-10 */"
	/* Modified by QuanQuan<millionfor@apache.org> `strftime("%a, %b %d, %Y %H:%M")` @Description "fix: ${0}" */

snippet vimjs "javascript vim: set ft=javascript fdm=marker et ff=unix tw=180 sw=2:"
	// vim: set ft=javascript fdm=marker et ff=unix tw=180 sw=2:
snippet ay "async"
	async${0}	
snippet aw "await"
	await${0}	

snippet deb "debugger"
	debugger
snippet try "try {} catch(e){  }"
	try {
		$SELECTION$
	} catch(e) {
		console.log(e)
	}


snippet ext "class InnerCtor "
	class InnerCtor {
		${0}
	}

	export default new InnerCtor()
	// vim: set ft=javascript fdm=marker et ff=unix tw=180 sw=2:

snippet exet "class InnerCtor extends xxx"
	class InnerCtor extends ${0} {
		${1}
	}

	export default new InnerCtor()
	// vim: set ft=javascript fdm=marker et ff=unix tw=180 sw=2:

snippet expd "export default"
	export default ({a})=> {
		${0}

	}

snippet expc "export class"
	export class Fn${0} {
		constructor ({a}) {
			this.name = a
		}
		test(){
			console.log(this.name)
		}
	}

snippet deb "_.debounce(function(){  })"
_.debounce(function () {
	${0}	
}, 300, { 'leading': false, 'trailing': true }),

snippet pcss "$-prefix-cls: ''"
	$-prefix-cls: "v-$TM_FILENAME_BASE";

snippet pcs "const prefixCls = '${0}'"
	const prefixCls = '${0}'

snippet swc " switch case "
	switch(${0}) {
	  case 1:
	    console.log(1) ${1}
	    break;
	  case 2:
	    console.log(2)
	    break;
	  default:
	    console.log(3)
	}

snippet pd "await new Promise(resolve => _.delay(resolve, 5000));"
await new Promise(resolve => _.delay(resolve, ${0:3000}));

snippet rnp " return new Promise((resolve, reject) => {${0}) "
	return new Promise((resolve, reject) => {
		${0}
	})

snippet inner " class InnerCtor {  } "
	const Inner = () => new InnerCtor()

	class InnerCtor {
	  constructor () {
	    ${0}
	  }

	}

	export default Inner()
	// vim: set ft=javascript fdm=marker et ff=unix tw=180 sw=2:

snippet ife " if(){ } else { } "
	if (${0}) {
  	${1}
	} else {
	  ${2}
	}

snippet cll " console.log(${0}) "
	console.log(${0})

snippet al " alert(${0}) "
	alert(${0})

snippet parr "@param {Array} xxx xxx "
	@param {Array} ${1} ${0}

snippet pobj "@param {Object} xxx xxx "
	@param {Object} ${1} ${0}

snippet pnum "@param {Number} xxx xxx "
	@param {Number} ${1} ${0}

snippet pstr "@param {String} xxx xxx "
	@param {String} ${1} ${0}

snippet pfunc "/* @param {string} */"
	/**
	 * ${1}
	 *
	 * @param {Array} ${0}
	 * @returns { Promise<String> } ${2}
	 */

snippet parrp "/* @param {Array} */"
	/**
	 * ${1}
	 *
	 * @param {Array} ${0}
	 */

snippet pobjp "/* @param {Object} */"
	/**
	 * ${1}
	 *
	 * @param {Object} ${0}
	 */

snippet pnump "/* @param {Number} */"
	/**
	 * ${1}
	 *
	 * @param {Number} ${0}
	 */

snippet pstrp "/* @param {String} */"
	/**
	 * ${1}
	 *
	 * @param {String} ${0}
	 */

snippet eslints "/* eslint-disable */"
	/* eslint-disable */

snippet eslint "// eslint-disable-line"
	// eslint-disable-line

snippet eslintn "// eslint-disable-next-line"
	// eslint-disable-next-line


snippet test "import test"
	import { assert } from './test'
	console.log(
		tests.every(test => assert(f1(test.$1), test.result))
	)

snippet un "undefined"
	undefined

snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}

snippet case "case 'xyz': ... break"
	case '${1:case}':
		${0:${VISUAL}}
		break;

snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	}

snippet ret
	return ${0:result};

snippet for "for~"
	for(let ${1:i} = 0; ${1} < ${2:100}; ${1}++) {
		${0:${VISUAL}}
	}

snippet wh "(condition) { ... }"
	let i = 0

	while (i < 10) {
		try {
			if (i === 5) {
				throw new Error('发生错误') // 抛出错误
			}
			console.log(i)
			i++
		} catch (error) {
			console.error('捕获到错误:', error.message)
			return // 退出函数
		}
	}


snippet do "do { ... } while (condition)"
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */})

snippet const
	const ${1} = ${0}

snippet let
	let ${1} = ${0}

snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}'

