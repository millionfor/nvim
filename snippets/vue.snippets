
snippet cps
	components
snippet slot
	<slot></slot>
snippet vcl "@click="onClick""
	@click="on${1}"
snippet vfor
	<div v-for="(item, $index) in ${1:items}" :key="$index">
    ${0}
	</div>
snippet vimvue "<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->"
	<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->
snippet vmods "String > model: { prop: 'value', event: '$on-xxx'}"
model: {
  prop: 'value',
  event: '$on-${0}'
},
props: {
  value: { type: String, default: '' }
},
snippet vmoda "Array > model: { prop: 'value', event: '$on-xxx'}"
model: {
  prop: 'value',
  event: '$on-${0}'
},
props: {
  value: { type: Array, default: () => [] }
},
snippet vmodo "Object > model: { prop: 'value', event: '$on-xxx'}"
model: {
  prop: 'value',
  event: '$on-${0}'
},
props: {
  value: { type: Object, default: () => {} }
},
snippet vmodb "Boolean > model: { prop: 'value', event: '$on-xxx'}"
model: {
  prop: 'value',
  event: '$on-${0}'
},
props: {
  value: { type: Boolean, default: false }
},
snippet vtp "<template> hhhh </template>"
	<template>
		${0}
	</template>
snippet vtss "<template slot-scope="scope">"
	<template slot-scope="scope">
		${0}
	</template>

snippet vss "slot-scope="scope""
	slot-scope="scope"	

snippet vcd "computed: { },"
	computed: { ${0} },

snippet imm "deep: true, immediate: true, handler(){  } "
'${1}': {
  deep: true,
  immediate: true,
  handler(v) {
    console.log(v)${0}
  }
}

snippet vcd "computed: { },"
	computed: { ${0} },

snippet vcp "components: { },"
	components: { ${0} },

snippet v3tss "vue3 typescript setup"
<template>
  <div :class="classes">
    `strftime("%a, %b, %d %Y %H:%M")`
  </div>
</template>

<script setup lang="ts">
  import { computed } from 'vue';

  const prefixCls = 'vi-`strftime("%a, %b, %d %Y %H:%M")`'
  const classes = computed(() => { return [``$0${ prefixCls }`] })

</script>
<style lang="scss" >
  $-prefix-cls: 'vi-`strftime("%a, %b, %d %Y %H:%M")`';
  .#{$-prefix-cls} {
  }
</style>
<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->


snippet v3tsn "vue + composition-api + ts"
	<template>
	  <div :class="classes">
      `strftime("%a, %b, %d %Y %H:%M")`
	  </div>
	</template>

	<script lang="ts">
	  import { defineComponent, computed } from '@nuxtjs/composition-api'

	  const prefixCls = 'vi-`strftime("%a, %b, %d %Y %H:%M")`'

	  export default defineComponent({
	    fetchOnServer: false,
	    middleware: 'auth',

	    setup () {

	      const classes = computed(() => {
	        return [
	          ``$0${ prefixCls }`
	        ]
	      })

	      return { classes }
	    },
	  })
	</script>
	<style lang="scss" rel="stylesheet/scss">
	  $-prefix-cls: 'vi-`strftime("%a, %b, %d %Y %H:%M")`';
	  .#{$-prefix-cls} {
	  }
	</style>
	<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->

snippet vue2 "v2 simple template'"
<template>
  <div :class="classes">
    `substitute(expand("%:t"), "." . expand("%:e"), "", "")`
  </div>
</template>

<script>

const prefixCls = 'vi-`substitute(expand("%:t"), "." . expand("%:e"), "", "")`'

export default {
  name: 'vi-`substitute(expand("%:t"), "." . expand("%:e"), "", "")`',
  data() {
    return {}
  },
  props: {},
  methods: {},
  watch: {},
  created() {},
  mounted() {},
  computed: {
    classes() {
      return [
        \`${ prefixCls }\`
      ]
    }
  },
  components: {}
}
</script>

<style lang="scss" rel="stylesheet/scss">
  $-prefix-cls: 'vi-`substitute(expand("%:t"), "." . expand("%:e"), "", "")`';
  .#{$-prefix-cls} {
  }
</style>
<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->

snippet vue22 "vue2 template'"
<template>
  <div :class="classes">
    `substitute(expand("%:t"), "." . expand("%:e"), "", "")`
  </div>
</template>

<script>
	
const prefixCls = 'vi-`substitute(expand("%:t"), "." . expand("%:e"), "", "")`'
	
export default {
  name: 'vi-`substitute(expand("%:t"), "." . expand("%:e"), "", "")`',
  data() {
    return {}
  },
  props: {},
  methods: {},
  watch: {},
  beforeCreate() {},
  created() {},
  beforeMount() {},
  mounted() {},
  beforeUpdate() {},
  updated() {},
  beforeDestroy() {},
  destroyed() {},
  computed: {
    classes() {
      return [
        \`${ prefixCls }\`
      ]
    }
  },
  components: {}
}
</script>

<style lang="scss" rel="stylesheet/scss">
  $-prefix-cls: 'vi-`substitute(expand("%:t"), "." . expand("%:e"), "", "")`';
  .#{$-prefix-cls} {
  }
</style>
<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->
