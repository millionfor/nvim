extends html, javascript, css, sass, typescript



snippet cps
	components
snippet slot
	<slot></slot>
snippet vcl "@click="onClick""
	@click="on${1}"
snippet vfor
	<div v-for="(item, $index) in ${1:items}" :key="$index">
    ${0}
	</div>
snippet vimvue "<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->"
	<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->
snippet vmods "String > model: { prop: 'value', event: '$on-xxx'}"
model: {
  prop: 'value',
  event: '$on-${0}'
},
props: {
  value: { type: String, default: '' }
},
snippet vmoda "Array > model: { prop: 'value', event: '$on-xxx'}"
model: {
  prop: 'value',
  event: '$on-${0}'
},
props: {
  value: { type: Array, default: () => [] }
},
snippet vmodo "Object > model: { prop: 'value', event: '$on-xxx'}"
model: {
  prop: 'value',
  event: '$on-${0}'
},
props: {
  value: { type: Object, default: () => {} }
},
snippet vmodb "Boolean > model: { prop: 'value', event: '$on-xxx'}"
model: {
  prop: 'value',
  event: '$on-${0}'
},
props: {
  value: { type: Boolean, default: false }
},
snippet vtp "<template> hhhh </template>"
	<template>
		${0}
	</template>
snippet vtss "<template slot-scope="scope">"
	<template slot-scope="scope">
		${0}
	</template>

snippet vss "slot-scope="scope""
	slot-scope="scope"	

snippet vcd "computed: { },"
	computed: { ${0} },

snippet imm "deep: true, immediate: true, handler(){  } "
'${1}': {
  deep: true,
  immediate: true,
  handler(v) {
    console.log(v)${0}
  }
}

snippet vcd "computed: { },"
	computed: { ${0} },

snippet vcp "components: { },"
	components: { ${0} },

snippet v3tss "vue3 typescript setup"
<template>
  <div :class="classes">
    $TM_FILENAME_BASE
  </div>
</template>

<script setup lang="ts">
  import { computed } from 'vue';

  const prefixCls = 'vi-$TM_FILENAME_BASE'
  const classes = computed(() => { return [``$0${ prefixCls }`] })

</script>
<style lang="scss" >
  $-prefix-cls: 'vi-$TM_FILENAME_BASE';
  .#{$-prefix-cls} {
  }
</style>
<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->


snippet v3tsn "vue + composition-api + ts"
	<template>
	  <div :class="classes">
	    $TM_FILENAME_BASE
	  </div>
	</template>

	<script lang="ts">
	  import { defineComponent, computed } from '@nuxtjs/composition-api'

	  const prefixCls = 'vi-$TM_FILENAME_BASE'

	  export default defineComponent({
	    fetchOnServer: false,
	    middleware: 'auth',

	    setup () {

	      const classes = computed(() => {
	        return [
	          ``$0${ prefixCls }`
	        ]
	      })

	      return { classes }
	    },
	  })
	</script>
	<style lang="scss" rel="stylesheet/scss">
	  $-prefix-cls: 'vi-$TM_FILENAME_BASE';
	  .#{$-prefix-cls} {
	  }
	</style>
	<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->


snippet v3tsx "vue3 tsx template"
	<template>
	  <div :class="classes">
	    $TM_FILENAME_BASE
	  </div>
	</template>

	<script lang="tsx">
	  import {Component, Emit, Inject, Model, Prop, Provide, Vue, Watch} from 'vue-property-decorator' // eslint-disable-line 

	  const prefixCls = 'vi-$TM_FILENAME_BASE'

	  @Component
	  export default class $TM_FILENAME_BASE extends Vue {

	    @Prop()
	    propA: number = 1
	    @Prop({ default: 'default value' })
	    propB: string
	    @Prop([String, Boolean])
	    propC: string | boolean
	    @Prop({ type: null })
	    propD: any
	    @Watch('child')
	    onChildChanged(val: string, oldVal: string) { }
	    name: '${NAME}'
	    created () {}
	    mounted () {}

	    get classes () {
	      return [
	        ``$0${ prefixCls }`
	      ]
	    }
	  }
	</script>
	<style lang="scss" rel="stylesheet/scss">
	  $-prefix-cls: 'vi-$TM_FILENAME_BASE';
	  .#{$-prefix-cls} {
	  }
	</style>
	<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->


snippet v2 "vue2 simple template'"
<template>
  <div :class="classes">
    $TM_FILENAME_BASE
  </div>
</template>

<script>

const prefixCls = 'vi-$TM_FILENAME_BASE'

export default {
  name: 'Vi$TM_FILENAME_BASE',
  data() {
    return {}
  },
  props: {},
  methods: {},
  watch: {},
  created() {},
  mounted() {},
  computed: {
    classes() {
      return [
        ``$0${ prefixCls }`
      ]
    }
  },
  components: {}
}
</script>

<style lang="scss" rel="stylesheet/scss">
  $-prefix-cls: 'vi-$TM_FILENAME_BASE';
  .#{$-prefix-cls} {
  }
</style>
<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->

snippet v22 "vue2 template'"
	<template>
		<div :class="classes">
	    $TM_FILENAME_BASE
		</div>
	</template>
	<script>
	
  const prefixCls = 'vi-$TM_FILENAME_BASE'
	
  export default {
	  name: 'Vi$TM_FILENAME_BASE',
	  data() {
	    return {}
	  },
	  props: {},
	  methods: {},
	  watch: {},
	  beforeCreate() {},
	  created() {},
	  beforeMount() {},
	  mounted() {},
	  beforeUpdate() {},
	  updated() {},
	  beforeDestroy() {},
	  destroyed() {},
	  computed: {
	    classes() {
	      return [
	        ``$0${ prefixCls }`
	      ]
	    }
	  },
	  components: {}
	}
	</script>

	<style lang="scss" rel="stylesheet/scss">
	  $-prefix-cls: 'vi-$TM_FILENAME_BASE';
	  .#{$-prefix-cls} {
	  }
	</style>
	<!-- vim: set ft=vue ff=unix et sw=2 ts=2 sts=2 tw=300: -->
